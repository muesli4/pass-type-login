#!/bin/bash

# dependencies: libnotify, pass, xclip, xdotool, xmlstarlet

# This script does the following:
#     1. Read a pattern to match on a directory within pass from the default clipboard
#     2. Find matched directory within a suffix, discarding multiple matches.
#     3. Uses the first file within that directory as username and the content as password.
#     4. Types the username (only when second argument given) and the password
#        after 2 seconds each, with announcement via libnotify.

PASSWORD_STORE="$HOME/.password-store"
PROMPT_DELAY_SECONDS=2

unlock_failed() {
    echo "No password given." >&2
    exit 1
}

prompt_field() {
    notify-send -i info -t "${PROMPT_DELAY_SECONDS}000" "pass" "Select field for $1."
    sleep "${PROMPT_DELAY_SECONDS}s"
}

type_arg0() {
    xdotool type "$1"
}

print_usage() {
    echo "Usage:"
    echo "    $0 PREFIX [--with-login]"
    echo
    echo "    PREFIX            The prefix within the pass directory to look in."
    echo
    echo "    --login-first     Type the login first and then the password."
}

if [ "$#" -eq 0 ]; then
    print_usage
else
    # prefix to look at
    PREFIX="$1"

    # read search pattern from clipboard
    PAT="$(xclip -o)"

    if [ -z "$PAT" ]; then
        notify-send -i error -t 4000 'pass' 'Read empty pattern from clipboard.'
    else
        cd "$PASSWORD_STORE"

        # lookup
        GPG_PATH="$(find "$PREFIX" -type d -iname "*$PAT*" | head -n 1 | xargs -I '{}' find '{}' -type f | head -n 1)"

        PASS_PATH="${GPG_PATH%.gpg}"

        if [ -n "$PASS_PATH" ]; then

            echo "Using $PASS_PATH"

            USERNAME=`basename "$PASS_PATH"`

            # unlock gpg-agent beforehand (TODO with gpg?)
            pass show "$PASS_PATH" > /dev/null
            if [ $? -eq 0 ]; then
                # work around bug in xdotool: https://github.com/jordansissel/xdotool/issues/97
                # this may not work for all cases unfortunately
                setxkbmap

                # insert username if requested
                if [ "$2" = '--login-first' ]; then
                    prompt_field 'login'
                    type_arg0 "$USERNAME"
                fi
                prompt_field 'password'
                type_arg0 "$(pass show "$PASS_PATH")"
            else
                unlock_failed
            fi

        else
            notify-send \
                -i error \
                -t 4000 \
                "pass" \
                "No password found for search pattern:
                <i>'$(xmlstarlet escape "$PAT")'</i>."
        fi
    fi
fi
